import requests
from bs4 import BeautifulSoup
import pandas as pd
import csv
import time

# Función para obtener la información de una vulnerabilidad desde Tenable Plugins
def get_vulnerability_info(plugin_name):
    base_url = 'https://www.tenable.com/plugins/nessus'
    search_url = f"{base_url}/search?q={plugin_name}&sort=&type=advanced"
    
    response = requests.get(search_url)
    
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        plugin_links = soup.select('.plugin-result a')
        
        if plugin_links:
            # Tomamos el primer enlace de resultado para obtener los detalles del plugin
            plugin_url = plugin_links[0]['href']
            plugin_response = requests.get(plugin_url)
            
            if plugin_response.status_code == 200:
                plugin_soup = BeautifulSoup(plugin_response.text, 'html.parser')
                # Buscar el valor de "Exploit Ease" en la página
                exploit_ease_tag = plugin_soup.find('strong', string='Exploit Ease:')
                if exploit_ease_tag:
                    exploit_ease = exploit_ease_tag.find_next('span').text.strip()
                else:
                    exploit_ease = ''
                
                return {
                    'plugin_name': plugin_name,
                    'exploit_ease': exploit_ease
                }
    return {'plugin_name': plugin_name, 'exploit_ease': ''}

# Leer nombres de vulnerabilidades desde el archivo de input
def read_input_file(filename):
    with open(filename, 'r') as file:
        return [line.strip() for line in file]

# Guardar los resultados en un archivo CSV
def save_to_csv(data, filename):
    df = pd.DataFrame(data)
    df.to_csv(filename, index=False, quoting=csv.QUOTE_NONNUMERIC)

# Script principal
def main():
    input_file = 'input.txt'
    output_file = 'output.csv'
    
    plugin_names = read_input_file(input_file)
    results = []
    
    for plugin_name in plugin_names:
        result = get_vulnerability_info(plugin_name)
        results.append(result)
        print(f"Processed: {plugin_name}")
        time.sleep(1)  # Pausa para evitar sobrecargar el servidor
        
    save_to_csv(results, output_file)
    print(f"Results saved to {output_file}")

if __name__ == '__main__':
    main()
